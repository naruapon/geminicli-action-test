name: '🏷️ Gemini Automated Issue Triage'

on:
  issues:
    types:
      - 'opened'
      - 'reopened'
  issue_comment:
    types:
      - 'created'
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'issue number to triage'
        required: true
        type: 'number'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'write'
  id-token: 'write'
  issues: 'write'
  statuses: 'write'

jobs:
  triage-issue:
    if: >
      github.event_name == 'issues' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       contains(github.event.comment.body, '@gemini-cli /triage') &&
       (github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'))
    timeout-minutes: 5
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Run Gemini Issue Triage'
        uses: './'
        id: 'gemini_issue_triage'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUE_TITLE: '${{ github.event.issue.title }}'
          ISSUE_BODY: '${{ github.event.issue.body }}'
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          REPOSITORY: '${{ github.repository }}'
        with:
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "maxSessionTurns": 25,
              "coreTools": [
                "run_shell_command(ls)",
                "run_shell_command(mkdir)",
                "run_shell_command(echo)",
                "run_shell_command(git)",
                "run_shell_command(gh)"
              ],
              "telemetry": {
                "enabled": false
              }
            }
          prompt: |-
            ## Role
            You are an AI software engineer. Your task is to analyze the given GitHub issue and implement the requested feature by writing code.

            ## Steps
            1.  **Analyze the Issue:** Review the issue title ("${ISSUE_TITLE}") and body ("${ISSUE_BODY}") to understand the requirements.
            2.  **Plan Implementation:** Determine the necessary files and directories. For example, a login page might require `src/pages/login.html` and `src/styles/login.css`.
            3.  **Create Files:** Use `mkdir -p` to create directories and `echo "..." > path/to/file.ext` to create and write code to files.
            4.  **Create a New Branch:** Create a new branch for this feature. The branch name should be descriptive, like `feature/issue-${ISSUE_NUMBER}-login-page`. Use: `git checkout -b feature/issue-${ISSUE_NUMBER}-login-page`.
            5.  **Commit Your Work:** Add all new files (`git add .`) and commit them with a clear message (`git commit -m "Feat: Implement login page for #${ISSUE_NUMBER}"`).
            6.  **Push to Remote:** Push the new branch to the repository (`git push origin feature/issue-${ISSUE_NUMBER}-login-page`).
            7.  **(Optional) Create a Pull Request:** If possible, create a pull request to merge your branch into main.

            ## Guidelines
            -   Write clean, functional code.
            -   Do not ask for clarification. Use the information provided in the issue.
            -   Execute commands one by one.
            -   Reference all shell variables as "${VAR}" (with quotes and braces).

      - name: 'Post Issue Triage Failure Comment'
        if: |-
          ${{ failure() && steps.gemini_issue_triage.outcome == 'failure' }}
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            github.rest.issues.createComment({
              owner: '${{ github.repository }}'.split('/')[0],
              repo: '${{ github.repository }}'.split('/')[1],
              issue_number: '${{ github.event.issue.number }}',
              body: 'There is a problem with the Gemini CLI issue triaging. Please check the [action logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })
